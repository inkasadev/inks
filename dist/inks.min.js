class Inks { constructor() { const e = [], t = !1, a = () => { if (!t) { if (e.length > 0) for (let t = e.length - 1; t >= 0; t--) { let a = e[t]; a.updateShake && a.updateShake() } requestAnimationFrame(a) } }, s = (e, t) => Math.floor(Math.random() * (t - e + 1)) + e; Object.defineProperties(this, { math: { enumerable: !0, value: { randomInt: s, toAngle: e => 180 * e / Math.PI } }, fx: { enumerable: !0, value: { shake: (t, a = 16, l = !1) => new Promise(n => { let r = 1, o = getComputedStyle(t), p = parseInt(o.left), u = parseInt(o.top), f = 1, i = a / 50; -1 === e.indexOf(t) && (e.push(t), t.updateShake = function () { l ? d() : m() }); const m = () => { r < 50 && (t.style.left = p + "px", t.style.top = u + "px", a -= i, t.style.left = p + s(-a, a) + "px", t.style.top = u + s(-a, a) + "px", r++), r >= 50 && (t.style.left = p + "px", t.style.top = u + "px", e.splice(e.indexOf(t), 1), n()) }, d = () => { r < 50 && (t.style.transform = "rotate(0deg)", a -= i, t.style.transform = "rotate(" + a * f + "deg)", r++, f *= -1), r >= 50 && (t.style.transform = "rotate(0deg)", e.splice(e.indexOf(t), 1), n()) } }) } }, resume: { enumerable: !0, value: () => { t = !1 } }, pause: { enumerable: !0, value: () => { t = !0 } }, isPaused: { enumerable: !0, get: () => t } }), a() } } const inks = new Inks;